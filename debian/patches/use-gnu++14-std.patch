Description: Use gnu++14 standards when building libraries
 Since gcc 5.0, the full C++14 standard is supported, so features
 like generalized lambda capture is now only available when setting
 the standard to c++14/gnu+=14.
 .
 This made it impossible to build either of these libraries with the
 currently specified flags (that work on gcc 4.8+).
Author: Giuseppe Lavagetto <glavagetto@wikimedia.org>
Forwarded: No
Last-Update: 2016-05-17
diff --git a/folly/configure.ac b/folly/configure.ac
index af1bbb4..ddce674 100644
--- a/third-party/folly/folly/configure.ac
+++ b/third-party/folly/folly/configure.ac
@@ -1,4 +1,3 @@
-
 #                                               -*- Autoconf -*-
 # Process this file with autoconf to produce a configure script.
 
@@ -44,10 +43,10 @@ AC_CXX_COMPILE_STDCXX_0X
 # during the real build.
 STD=""
 if test "x$ac_cv_cxx_compile_cxx0x_cxx" = xyes; then
-   STD="-std=c++0x"
+   STD="-std=c++14"
 fi
 if test "x$ac_cv_cxx_compile_cxx0x_gxx" = xyes; then
-   STD="-std=gnu++0x"
+   STD="-std=gnu++14"
 fi
 
 CXXFLAGS="$STD $CXXFLAGS"
diff --git a/wangle/CMakeLists.txt b/wangle/CMakeLists.txt
index e5360ec..73e49ed 100644
--- a/third-party/wangle/wangle/CMakeLists.txt
+++ b/third-party/wangle/wangle/wangle/CMakeLists.txt
@@ -7,7 +7,7 @@
 
 cmake_minimum_required(VERSION 2.8)
 
-set(CMAKE_CXX_FLAGS "-std=c++0x -fPIC")
+set(CMAKE_CXX_FLAGS "-std=gnu++14 -fPIC")
 set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/)
 
 set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
diff --git a/thrift/configure.ac b/thrift/configure.ac
index 640e91d..3e2fb6c 100644
--- a/third-party/fbthrift/thrift/configure.ac
+++ b/third-party/fbthrift/thrift/configure.ac
@@ -76,10 +76,10 @@ AC_LANG([C++])
 
 CXXFLAGS=""
 if test "$ac_cv_cxx_compile_cxx0x_cxx" = yes; then
-   CXXFLAGS="-std=c++1y"
+   CXXFLAGS="-std=c++14"
 fi
 if test "$ac_cv_cxx_compile_cxx0x_gxx" = yes; then
-   CXXFLAGS="-std=gnu++1y"
+   CXXFLAGS="-std=gnu++14"
 fi
 
 
